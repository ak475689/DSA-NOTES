
Given a string s, partition s such that every substring of the partition is a palindrome.

Return the minimum cuts needed for a palindrome partitioning of s.

class Solution {
public:
    bool pal(string s,int i,int j){
        while(i<=j){
            if(s[i]!=s[j]){
                return false;
            }
            i++;
            j--;
        }
        return true;
    }
    int f(int i,string &s,vector<int>&dp){
        if(i==s.size()){
            return 0;
        }
        if(dp[i]!=-1){
            return dp[i];
        }
        int ans=INT_MAX;
        for(int j=i;j<s.size();j++){
            if(pal(s,i,j)){
                ans=min(ans,1+f(j+1,s,dp));
            }
        }
        return dp[i]=ans;
    }
    int minCut(string s) {
        int n=s.size();
        vector<int>dp(n+1,-1);
        int i=0;
        return f(i,s,dp)-1;
    }
};
