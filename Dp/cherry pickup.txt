https://leetcode.com/problems/cherry-pickup/


class Solution {
public:
    vector<vector<vector<int>>>dp;
    bool isValid(int r, int c, int  n){
        return  r>=0&&r<n&&c>=0&&c<n;
    }
    int max_cherries_memz(int r1, int c1, int c2,vector<vector<int>>&grid){
        int n = grid.size();
        int r2 = r1+c1-c2;
       
        if((!isValid(r1,c1,n))||(!isValid(r2,c2,n))||(grid[r1][c1]==-1)||(grid[r2][c2]==-1))
            return -1e9;
        if(r1==n-1&&c1==n-1)
            return grid[r1][c1];
        if(dp[r1][c1][c2]!=-1)
            return dp[r1][c1][c2];
        int cherries = grid[r1][c1];
        
        if(c1!=c2&&grid[r2][c2])
            cherries++;
        
        int maxi_rec_cherries = -1e9;
        
        maxi_rec_cherries = max(maxi_rec_cherries, max_cherries_memz(r1+1,c1,c2+1,grid));
        maxi_rec_cherries = max(maxi_rec_cherries, max_cherries_memz(r1+1,c1,c2,grid));
        maxi_rec_cherries = max(maxi_rec_cherries, max_cherries_memz(r1,c1+1,c2,grid));
        maxi_rec_cherries = max(maxi_rec_cherries, max_cherries_memz(r1,c1+1,c2+1,grid));
        
        return  dp[r1][c1][c2] = maxi_rec_cherries + cherries;
    }
    int cherryPickup(vector<vector<int>>& grid) {
        int n = grid.size();
        dp.assign(n+1,vector<vector<int>>(n+1,vector<int>(n+1,-1)));
        return max(0,max_cherries_memz(0,0,0,grid));
    }
};