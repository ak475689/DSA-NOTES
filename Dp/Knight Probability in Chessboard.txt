
The knight continues moving until it has made exactly k moves or has moved off the chessboard.

Return the probability that the knight remains on the board after it has stopped moving.

 
class Solution {
public:
    int dx[8]={1,1,2,2,-1,-1,-2,-2};
    int dy[8]={2,-2,1,-1,2,-2,1,-1};
    double knightProbability(int n, int k, int r, int c) {
        vector<vector<double>>curr(n,vector<double>(n,0));
        vector<vector<double>>next(n,vector<double>(n,0));
        curr[r][c]=1;
        for(int m=1;m<=k;m++){
            for(int i=0;i<n;i++){
                for(int j=0;j<n;j++){
                    if(curr[i][j]>0){
                        for(int k=0;k<8;k++){
                            int nx=i+dx[k];
                            int ny=j+dy[k];
                            if(nx>=0&&nx<n&&ny>=0&&ny<n){
                                next[nx][ny]+=curr[i][j]/8.0;
                            }
                        }
                    }
                }
            }
            curr=next;
            next=vector<vector<double>>(n,vector<double>(n,0));
        }
        double sum=0;
        for(int i=0;i<n;i++){
            for(int j=0;j<n;j++){
                sum=sum+curr[i][j];
            }
        }
        return sum;
    }
};