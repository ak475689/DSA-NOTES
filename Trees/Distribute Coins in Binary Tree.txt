 You are given the root of a binary tree with n nodes where each node in the tree has node.val coins. There are n coins in total throughout the whole tree.

In one move, we may choose two adjacent nodes and move one coin from one node to another. A move may be from parent to child, or from child to parent.

Return the minimum number of moves required to make every node have exactly one coin.

 
 
  pair<int, int> helperFunc(TreeNode* root, int &ans)
    {
        if(root == NULL)
            return {0, 0};
        
        pair<int, int> lft = helperFunc(root->left, ans);
        pair<int, int> rgt = helperFunc(root->right, ans);
        
        pair<int, int> curr = {lft.first + rgt.first + root->val, lft.second + rgt.second + 1};
        
        ans += abs(curr.first - curr.second);
        
        return curr;
    }
    int distributeCoins(TreeNode* root) {
        
        int ans = 0;
        pair<int, int> p = helperFunc(root, ans);
        return ans;
    }