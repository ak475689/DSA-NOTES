class Solution {
public:
    vector<string> result;
    queue<string> q;
    
    bool isValid(string& a){
        string s = "";
        for(char &c: a){
            if(c == ')'){
                if(s.back() == '(')
                    s.pop_back();
                else return false;
            }
            else if(c == '(')
                s.push_back(c);
        }
        return s.empty();
    }
    vector<string> removeInvalidParentheses(string s) {
        unordered_set<string> set;
        if(isValid(s)) return {s};
        q.push(s);
        
        while(!q.empty()){
            int sz = q.size();
            while(sz--){
                string s = q.front();
                q.pop();
                if(set.find(s) != set.end())
                    continue;
                set.insert(s);
                if(isValid(s))
                    result.push_back(s);
                int n = s.size();
                for(int i = 0; i < n && result.empty(); i++){
                    if(isalpha(s[i])) continue;
                    string temp = s.substr(0, i) + s.substr(i + 1);
                    q.push(temp);
                }
            }
        }
        return result;
    }
};