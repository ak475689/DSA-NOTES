 int findMaxLen(string s) {
        stack<int> ch;
        ch.push(-1);
        int count=0;
        for(int i=0;i<s.length();i++)
        {
            if(s[i]=='(')
            {
                ch.push(i);
            }
            else if(s[i]==')')
            {
                ch.pop();
                if(ch.empty())
                {
                    ch.push(i);
                }
                else if(!ch.empty())
                {
                    int temp=i-ch.top();
                    if(temp>count)
                    {
                        count=temp;
                    }
                }
            }
        }
        return count;
    }


   //O(n):time and O(1):space complextiy

class Solution {
    public int longestValidParentheses(String s) {
        int open = 0 , close = 0;
        int max = 0;
        
        // 0 -- n
        for(int i=0;i<s.length();i++){
            char c = s.charAt(i);
            if(c == '('){
                open++;
            }
            else{
                close++;
            }
            
            if(open == close){
                int len = open + close;
                max = Math.max(max,len);
            }
            else if(close > open ){
                open = close = 0;
            }
        }
        
        open = close = 0;
        // n -- 0
        for(int i= s.length()-1; i>=0 ;i--){
            char c = s.charAt(i);
            if(c == '('){
                open++;
            }
            else{
                close++;
            }
            
            if(open == close){
                int len = open + close;
                max = Math.max(max,len);
            }
            else if(open > close ){
                open = close = 0;
            }
        }
        
        return max;
    }
}