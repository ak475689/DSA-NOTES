
"What is the minimum number of edges he needs to reverse in order to have at least one path from vertex 1 to vertex N, where the vertices are numbered from 1 to N.

#include <bits/stdc++.h>
using namespace std;

int main() {
    int n,m;
    cin>>n>>m;
    vector<pair<int,int>>adj[n+1];
    for(int i=0;i<m;i++){
        int x,y;
        cin>>x>>y;
        adj[x].push_back({y,0});
        adj[y].push_back({x,1});
    }
    priority_queue<pair<int,int>,vector<pair<int,int>>,greater<pair<int,int>>>pq;
    pq.push({0,1});
    vector<int>d(n+1,INT_MAX);
    d[1]=0;
    while(pq.size()>0){
        pair<int,int>p=pq.top();
        pq.pop();
        int dis=p.first;
        int u=p.second;
        for(auto x:adj[u]){
            int v=x.first;
            int rev=x.second;
            // cout<<v<<" "<<u<<"\n";
            if(d[v]>rev+d[u]){
                d[v]=rev+d[u];
                pq.push({d[v],v});
            }
        }
    }
    if(d[n]==INT_MAX){
        cout<<"-1"<<"\n";
    }
    else{
        cout<<d[n]<<"\n";
    }
	return 0;
}
